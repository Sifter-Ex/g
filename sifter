#!/bin/bash
LPATH='/opt/sifter/'
ORNG='\033[0;33m'
NC='\033[0m'
W='\033[1;37m'
LP='\033[1;35m'
YLW='\033[1;33m'
LBBLUE='\e[104m'
RED='\033[0;31m'
LGRY='\033[0;37m'
INV='\e[7m'
BRED='\033[1;31m'
UPURPLE='\033[4;35m'
BIGreen='\033[1;92m'
BIYellow='\033[1;93m'
UBLUE='\033[4;34m'
URED='\033[4;31m'
STATUS='NO'
ARG=$2
STLTH=$1

cd /opt/sifter
##############################
# ! # First Time Deb Install #
##############################
FIRSTTIME=1
###
#first_inst(){
#        echo -e "${INV}${LGRY}"
#        python3 extras/ban.py
#        python3 extras/ban2.py
#        echo -e "${NC}"
#        echo -e "\n${LGRY}####################################"
#        echo -e "# ${NC}[${RED}!${NC}]${ORNG}NOTE:${YLW} Running Initial Install ${LGRY}#${NC}"
#        echo -e "${LGRY}####################################${NC}\n"
#        bash /opt/sifter/install.sh
        ##
        # Initial Install
        ##
#        sudo sed -i "s/FIRSTTIME=1/FIRST=DONE/g" /opt/sifter/sifter
#        sudo sed -i "s/FIRSTTIME=1/FIRST=DONE/g" /usr/sbin/sifter
#}

#if [[ ${FIRSTTIME} == 1 ]]; then
#        first_inst
#fi

##############################
# Help Menu #
#############
usage() {                                    	  # Function: Print a help message.
	echo -e  "${YLW}Sifter Help Menu${NC}"
	echo "*****************"
	echo "+"
	echo "+"
	echo -e "${RED}# ${ORNG}sifter${NC}    runs the programs bringing up the menu in a cli environment"
	echo -e "${RED}# ${ORNG}sifter ${YLW}-c${NC} will check the exsiting hosts in the hostlist"
	echo -e "${RED}# ${ORNG}sifter ${YLW}-a${NC} 'target' must be added with '' then is automatically appended to host file"
	echo -e "${RED}# ${ORNG}sifter ${YLW}-e${NC} Opens the Exploitation Module Menu"
	echo -e "${RED}# ${ORNG}sifter ${YLW}-i${NC} Opens the Info-based Module Menu"
	echo -e "${RED}# ${ORNG}sifter ${YLW}-d${NC} Opens the Domain Focused Module Menu"
	echo -e "${RED}# ${ORNG}sifter ${YLW}-n${NC} Opens the Network Mapping Module Menu"
	echo -e "${RED}# ${ORNG}sifter ${YLW}-w${NC} Opens the Website Focused Module Menu"
	echo -e "${RED}# ${ORNG}sifter ${YLW}-o${NC} Opens the OpSec & Threat Analysis Module Menu"
    echo -e "${RED}# ${ORNG}sifter ${YLW}-r${NC} Opens the Router Focused Module Menu"
	echo -e "${RED}# ${ORNG}sifter ${YLW}-W${NC} Opens the Web-App Focused Module Menu"
	echo -e "${RED}# ${ORNG}sifter ${YLW}-v${NC} Opens the Vulnerability Scanning Module Menu"
    echo -e "${RED}# ${ORNG}sifter ${YLW}-m${NC} Opens the Module Menu directly"
    echo -e "${RED}# ${ORNG}sifter ${YLW}-p${NC} Opens the password tools for quick passlist generation or hash decryption"
    echo -e "${RED}# ${ORNG}sifter ${YLW}-x${NC} Opens the Cross-Site Scripting & SQLinjection Module Menu"
	echo -e "${RED}# ${ORNG}sifter ${YLW}-R${NC} Opens the results folder for viewing of files or photos"
    echo -e "${RED}# ${ORNG}sifter ${YLW}-u${NC} Checks for any updates on Github"
    echo -e "${RED}# ${ORNG}sifter ${LP}--stealth${NC} Starts sifter in ${LP}Anonymous${NC} mode"
    echo -e "${RED}# ${ORNG}sifter ${YLW}-I${NC} Opens the Module Information Menu"
	echo -e "${RED}# ${ORNG}sifter ${YLW}-h${NC} This Help Menu" 1>&2
}
#######################
# Information Modules #
#######################
##########################
# Enterprise Target Info #
##########################
cred_mods(){
  cd /opt/sifter
  echo -e "${RED}"
  figlet -f mini "Enterprise Information Gatherers"
  echo -e "${LP}This module focuses on Enterprises and their online presence"
  echo -e "${YLW}eg. web-directories, enterprise email addresses, etc."
  echo -e "${ORNG}"
  echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
  PS3=' ==========================#?: '
          options=("theHarvester" "Osmedeus" "ReconSpider" "CredNinja" "OSINT-Framework" "Back") 
          select opt in "${options[@]}"
          do
                  case $opt in
                            "theHarvester")
                                ./modules/credmods/harvester.sh
                                ;;

                            "Osmedeus")
                                ./modules/credmods/osmedeus.sh
                                ;;

                            "ReconSpider")
                                ./modules/credmods/rspider.sh
                                ;;

                            "CredNinja")
                                ./modules/credmods/credninja.sh
                                ;;
                            
                            "OSINT-Framework")
                                ./modules/credmods/osintf.sh
                                ;;

                            "Back")
                                modules
                                ;;
                    esac
            done
            echo -e "${NC}"
}
##########################
# Individual Target Info #
##########################
phone_mods(){
  cd /opt/sifter
  echo -e "${RED}"
  figlet -f mini "Targeted Information Gatherers"
  echo -e "${LP}This module focuses on individual targets."
  echo -e "${YLW}eg. Social media information, phone number information, etc."
  echo -e "\n ${W}=============================================================\n ${ORNG}What would you like to use?\n ${W}=============================================================${NC}"
  PS3=' ==========================#?: '
          options=("Seeker" "Sherlock" "xRay" "Maryam" "E2P (Email2PhoneNumber)" "ODIN" "CardPwn" "DeadTrap" "iKy" "Back") 
          select opt in "${options[@]}"
          do
                  case $opt in
                            "Seeker")
                                ./modules/credmods/seeker.sh
                                ;;

                            "Sherlock")
                                ./modules/credmods/sherlock.sh
                                ;;

                            "Maryam")
                                ./modules/credmods/maryam.sh
                                ;;

                            "xRay")
                                ./modules/credmods/xray.sh
                                ;;

                            "E2P (Email2PhoneNumber)")
                                ./modules/credmods/e2p.sh
                                ;;

                            "ODIN")
                                ./modules/credmods/odin.sh
                                ;;

                            "CardPwn")
                                ./modules/credmods/cardpwn.sh
                                ;;

                            "DeadTrap")
                                deadtrap
                                ;;

                            "iKy")
                                ./modules/credmods/iky.sh
                                ;;

                            "Back")
                                modules
                                ;;
                    esac
            done
            echo -e "${NC}"
}
##########################
# Info Gathering Modules #
##########################
info_mods(){
    cd /opt/sifter
    echo -e "${RED}"
    figlet -f mini "Information Gatherers"
    echo -e "${ORNG}"
    echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
    PS3=' ==========================#?: '
            options=("Enterprise Focus" "Individual Focus" "Back")
            select opt in "${options[@]}"
            do
                    case $opt in
                            "Enterprise Focus")
                                cred_mods
                                ;;

                            "Individual Focus")
                                phone_mods
                                ;;

                            "Back")
                                modules
                                ;;
                    esac
            done
        echo -e "${NC}"

}
#####################
# HoneyPot Scanners #
#####################
honey_mods(){
    cd /opt/sifter
    echo -e "${RED}"
    figlet -f mini "HoneyPot Detection Systems"
    echo -e "${LP}This module focuses on Enterprises and their online presence"
    echo -e "${YLW}eg. web-directories, enterprise email addresses, etc."
    echo -e "\n ${W}=============================================================\n ${ORNG}What would you like to use?\n ${W}=============================================================${NC}"
    PS3=' ==========================#?: '
            options=("HoneyCaught" "SniffingBear" "HoneyTel" "HFish" "Back")
            select opt in "${options[@]}"
            do
                case $opt in
                            "HoneyCaught")
                                ./modules/honeymods/honeyc.sh
                                ;;

                            "SniffingBear")
                                ./modules/honeymods/s_bear.sh
                                ;;

                            "HoneyTel")
                                ./modules/honeymods/honeytel.sh
                                ;;

                            "HFish")
                                ./modules/honeymods/hfish.sh
                                ;;

                            "Back")
                                modules
                                ;;
                    esac
            done
        echo -e "${NC}"

}
##################
# Domain Modules #
##################
dom_mods(){
  cd /opt/sifter
  echo -e "${RED}"
  figlet -f mini "Domain Recon Gathering"
  echo -e "${ORNG}"
  echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
  PS3=' ==========================#?: '
          options=("DnsTwist" "Armory" "Spiderfoo7" "SubFinder" "Pulsar" "Back")    #"SubDover" 
          select opt in "${options[@]}"
          do
                  case $opt in
                            "DnsTwist")
                                ./modules/dommods/dnstwist.sh
                                ;;

                            "Armory")
                                ./modules/dommods/armory.sh
                                ;;

                            #"SubDover")
                            #    ./modules/dommods/subdover.sh
                            #    ;;

                            "Spiderfoo7")
                                ./modules/dommods/spiderfoot.sh
                                ;;

                            "SubFinder")
                                ./modules/dommods/subfinder.sh
                                ;;

                            "Pulsar")
                                ./modules/dommods/pulsar.sh
                                ;;

                            "Back")
                                modules
                                ;;
                    esac
            done
            echo -e "${NC}"
}
###################
# Network Modules #
###################
net_mods(){
  cd /opt/sifter
  echo -e "${RED}"
  figlet -f mini "Network Scanners"
  echo -e "${ORNG}"
  echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
  PS3=' ==========================#?: '
          options=("nMap" "Arp-Scan" "AttackSurfaceMapper" "wafw00f" "aSnip" "Espionage" "Back")
          select opt in "${options[@]}"
          do
                  case $opt in
                            "nMap")
                                ./modules/netmods/nmap.sh
                                ;;

                            "Arp-Scan")
                                echo -e "${YLW}Would you like to scan your ${RED}l${YLW}ocal network, or use ${RED}c${YLW}ustom arp-scan args?(${RED}l${YLW}/${RED}c${YLW})${NC}"
                                read ASO
                                if [[ ${ASO} == "l" ]]; then
                                    sudo arp-scan -l
                                else
                                    echo -e "${YLW}Please enter your arp-scan arguments now\n${RED}eg. ${ORNG}-N -q -v${NC}"
                                    echo -e "${LP}An xTerm window will be shown for 3mins, showing the ${YLW}arp-scan argument list${NC}"
                                    xterm -e echo -e ${ORNG}arp-scan --help && echo -e "${NC}" && sleep 180
                                    read ARPARG
                                    sudo arp-scan ${ARPARG}
                                fi
                                ;;

                            "AttackSurfaceMapper")
                                ./modules/netmods/asm.sh
                                ;;

                            "wafw00f")
                                ./modules/netmods/wafw00f.sh
                                ;;

                            "aSnip")
                                ./modules/netmods/asnip.sh
                                ;;

                            "Espionage")
                                ./modules/netmods/espionage.sh
                                ;;

                            "Back")
                                modules
                                ;;
                    esac
            done
            echo -e "${NC}"
}
##########################
# Vulnerability Scanners #
##########################
vuln_mods(){
  cd /opt/sifter
  echo -e "${RED}"
  figlet -f mini "Vulnerability Scanners"
  echo -e "${ORNG}"
  echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
  PS3=' ==========================#?: '
          options=("Flan" "RapidScan" "Yuki-Chan" "KatanaFramework" "Nettacker" "F5 Big IP RCE" "Back")
          select opt in "${options[@]}"
          do
                  case $opt in
                            "Flan")
                                ./modules/vulnscanners/flan.sh
                                ;;

                            "RapidScan")
                                ./modules/vulnscanners/rapidscan.sh
                                ;;

                            "Yuki-Chan")
                                ./modules/vulnscanners/yuki.sh
                                ;;

                            "KatanaFramework")
                                ./modules/vulnscanners/ktf.sh
                                ;;

                            "Nettacker")
                                ./modules/vulnscanners/nettacker.sh
                                ;;

                            "F5 Big IP RCE")
                                ./modules/vulnscanners/bip.sh
                                ;;

                            "Back")
                                modules
                                ;;
                    esac
            done
            echo -e "${NC}"
}
#######################
# Web-Focused Modules #
#######################
web_mods(){
  cd /opt/sifter
  echo -e "${RED}"
  figlet -f mini "Website Scanners & Enumerators"
  echo -e "${ORNG}"
  echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
  PS3=' ==========================#?: '
          options=("Dirb" "Nikto" "BlackWidow" "DorksEye" "WP Analysis" "Katana-DS" "Zeus" "Back")
          select opt in "${options[@]}"
          do
                  case $opt in
			                "Dirb")
			                    ./modules/webmods/dirb.sh
				                ;;

                            "Nikto")
                                ./modules/webmods/nikto.sh
                                ;;

                            "BlackWidow")
                                ./modules/webmods/widow.sh
                                ;;

                            "WP Analysis")
                                echo -e "${YLW}WPScan & WPForce"
                                echo -e "${W}Tools for use against wordpress${NC}"
                                sleep 3
                                ./modules/webmods/wordpress.sh
                                ;;

			                "DorksEye")
			    	            ./modules/webmods/dorkseye.sh
				                ;;

                            "Katana-DS")
                                ./modules/webmods/kds.sh
                                ;;

                            "Zeus")
                                ./modules/webmods/zeus.sh
                                ;;

                            "Back")
                                modules
                                ;;
                    esac
            done
            echo -e "${NC}"
}
#####################
# Post Exploitation #
#####################
post_ex(){
    echo -e "${RED}"
    figlet -f mini "Post-Exploitation"
    echo -e "${NC}"
    echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
    PS3=' ==========================#?: '
        options=("EoP Exploit" "Potatoes 'n PEAS" "Omega" "WinPwn" "PowerSharp" "CredHarvester" "ACLight2" "PowerHUB" "Back")
        select opt in "${options[@]}"
        do
            case $opt in
                "EoP Exploit")
                    echo -e "${W}The EoP module helps elevate user privileges on an exploited system${NC}"
                    ./modules/postex/EoP.sh
                    ;;

                "Potatoes 'n PEAS")
                    echo -e "${YLW}This will copy a file to your Desktop to be used on an exploited target session\nWould you like to continue?(y/n)${NC}"
                    read BP
                    if [[ ${BP} == "y" ]]; then
                        ./modules/postex/potnpea.sh
                    else
                        post_ex
                    fi
                    ;;

                "Omega")
                    echo -e "${W}This tool acts as a Command n Control Server for call-back of exploited systems${NC}"
                    ./modules/postex/omega.sh
                    ;;                    

                "WinPwn")
                    echo -e "${W}This module checks for internal system privilege escalation methods that could be used to elevate user privs${NC}"
                    ./modules/postex/winpwn.sh
                    ;;

                "PowerSharp")
                    echo -e "${W}This is a ${YLW}PowerShell${W} tool that is to be used on an exploited system${NC}"
                    xterm -e bash /opt/sifter/modules/postex/powersharp.sh
                    ;;

                "CredHarvester")
                    echo -e "${W}Python3 tool to gather credentials on a successfully infultrated machine${NC}"
                    ./modules/postex/credharvester.sh
                    ;;
                
                "ACLight2")
                    echo -e "${W}This tool is used on an exploited target\n in order to search for Shadow Admins${NC}"
                    ./modules/postex/aclight.sh
                    ;;

                "PowerHUB")
                    echo -e "${W}This tool is used in order to help bypass end-point protection${NC}"
                    ./modules/postex/powerhub.sh
                    ;;

                "Back")
                    ex_mods
                    ;;

            esac
        done
    echo -e "${NC}"
}
##################
# Password Tools #
##################
pass_tools(){
    cd /opt/sifter/modules/passtools
    echo -e "${RED}"
    figlet -f mini "Password Tools"
    echo -e "${ORNG}"
    echo -e " ${W}=============================================================\n ${ORNG}What would you like to use?\n ${W}==============================================================${NC}"
    PS3=' ==========================#?: '
        options=("Mentalist" "dCipher" "Ciphey" "Back")
        select opt in "${options[@]}"
        do
            case $opt in
                "Mentalist")
                    echo -e "${YLW}Mentalist is a Graphical password creation tool"
                    ./modules/passtools/Mentalist
                    ;;

                "dCipher")
                    echo -e "${YLW}Decipher hashes using online rainbow & lookup table attack services.${NC}"
                    ./modules/passtools/dcipher.sh
                    ;;

                "Ciphey")
                    ./modules/passtools/ciphey.sh
                    ;;

                "Back")
                    modules
                    ;;

            esac
        done
    echo -e "${NC}"
}
###########################
# Exploitation Frameworks #
###########################
exframes(){
    echo -e "${RED}"
  figlet -f mini "Exploitation Frameworks"
  echo -e "${ORNG}"
  echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
  PS3=' ==========================#?: '
        options=("Metasploit" "Thoron" "FuzzyDander" "Back")
        select opt in "${options[@]}"
        do
                case $opt in
                    "Metasploit")
                        echo -e "${YLW}This will launch Metasploit in xterm, to allow continuous usage of Sifter\nif you are unable to use xterm enter ${RED}n${YLW} else hit ${UBLUE}enter${NC}"
                        read XOPT
                        if [[ ${XOPT} == "n" ]]; then
                            msfconsole
                        else
                            xterm -e msfconsole
                        fi
                        ;;

                    "Thoron")
                        echo -e "${YLW}This is an exploitation framework aimed towards Linux Exploitation\n${LP}Would you like to continue?(y/n)${NC}"
                        read XOPT
                        if [[ ${XOPT} == "y" ]]; then
                            ./modules/exmods/thoron.sh
                        else
                            exframes
                        fi
                        ;;

                    "FuzzyDander")
                        echo -e "${LP}FuzzBunch & DanderSpritz Framework,"
                        echo -e "codename:${RED}FuzzyDander${NC}"
                        echo -e "${YLW}If you do not know what these tools are or how they work,\nyou should not be using them. As such no instructions will be added.${NC}"
                        if [[ ! -f '/opt/sifter/modules/exmods/fuzzyd.sh' ]]; then
                            echo -e "${URED}You do not have this module, please post an issue request on github or send me \n an email at s1l3n7h0s7@gmail.com and it will be sent to you with install instructions${NC}"
                        else
                            echo -e "${W}Would you like to continue?(y/n)${NC}"
                            read M_ANS
                            if [[ ${M_ANS} == 'y' ]]; then
                                ./modules/exmods/fuzzyd.sh
                            else
                                ex_mods
                            fi
                        fi
                        ms_tools
                        ;;

                    "Back")
                        ex_mods
                        ;;

            esac
        done
    echo -e "${NC}"               
}
########################
# Exploitation Modules #
########################
ex_mods(){
  cd /opt/sifter
  echo -e "${RED}"
  figlet -f mini "Exploitation Tools"
  echo -e "${ORNG}"
  echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
  PS3=' ==========================#?: '
        options=("Microsoft Explicit" "BruteForcing" "TigerShark" "Web Exploiters" "Search for Exploits" "Post-Exploitation" "Exploitation Frameworks" "NevrrMore" "Back")
        select opt in "${options[@]}"
        do
                case $opt in
                    "Microsoft Explicit")
                        echo -e "${YLW}These tools are used to exploit MicroSoft systems${NC}"
                        sleep 3
                        ms_tools
			            ;;

                    "BruteForcing")
                        bruters
                        ;;

                    "TigerShark")
                        echo -e "${YLW}TigerShark is a multi-tooled phishing framework${NC}"
                        sleep 3
                        ./modules/exmods/tiger.sh
                        ;;

                    "Web Exploiters")
                        echo -e "${YLW}These tools are aimed at exploiting websites${NC}"
                        sleep 3
                        web_tools
                        ;;

                    "Search for Exploits")
                        echo -e "${YLW}These tools allow you to search to certain exploits or vulnerabilities${NC}"
                        sleep 3
                        search_tools
                        ;;

                    "Exploitation Frameworks")
                        exframes
                        ;;

                    "Post-Exploitation")
                        post_ex
                        ;;

                    "NevrrMore")
                        #./modules/exmods/nvrmore.sh
                        sleep 2
                        echo -e "${RED}LOL ${ORNG}Nope. Sorry${NC}"
                        sleep 2
                        ex_mods
                        ;;

                    "Back")
                        modules
                        ;;
                esac
        done
    echo -e "${NC}"
}
######################
# BruteForce Modules #
######################
bruters(){
    cd /opt/sifter
    echo -e "${RED}"
    figlet -f mini "BruteDUM"
    echo -e "${ORNG}"
    echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
    PS3=' =============================#?: '
        options=("BruteDUM" "WBruter" "Back")
        select opt in "${options[@]}"
        do
                case $opt in
                    "BruteDUM")
                        echo -e "${YLW}BruteDUM is a bruteforcing tool that consists of Medusa, nCrack, Hydra${NC}"
                        sleep 3
                        ./modules/exmods/brutedum.sh
                        ;;

                    "WBruter")
                        ./modules/exmods/wbruter.sh
                        ;;

                   "Back")
                        modules
                        ;;
                esac
        done
    echo -e "${NC}"
}
#####################
# Exploit Searchers #
#####################
search_tools(){
    cd /opt/sifter
    echo -e "${RED}"
    figlet -f mini "Exploit Finders"
    echo -e "${ORNG}"
    echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
    PS3=' =============================#?: '
        options=("ShodanSploit" "FindSploit" "Back")
        select opt in "${options[@]}"
        do
                case $opt in
                    "ShodanSploit")
                        echo -e "${YLW}ShodanSploit allows for shodan searches to be done quickly from the terminal${NC}"
                        sleep 3
                        ./modules/exmods/ssploit.sh
                        ;;

                    "FindSploit")
                        echo -e "${YLW}This tool allows you to search, copy or compile exploits${NC}"
                        sleep 3
                        ./modules/exmods/fsploit.sh
                        ;;

                    "Back")
                        modules
                        ;;
                esac
        done
    echo -e "${NC}"
}
##########################
# MicroSoft Exploitation #
##########################
ms_tools(){
  cd /opt/sifter
  echo -e "${RED}"
  figlet -f mini "MicroSoft Exploitation Tools"
  echo -e "${ORNG}"
  echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
  PS3=' =============================#?: '
        options=("ActiveReign" "iSpy" "SMBGhost" "Back")
        select opt in "${options[@]}"
        do
                case $opt in
			              "ActiveReign")
			                    echo -e "${YLW}ActiveReign is a LDAP Network-Attack toolkit${NC}"
                                sleep 3
                                ./modules/exmods/ar3.sh
			                    ;;

                          "iSpy")
                                echo -e "${YLW}iSpy is a ${UBLUE}BlueKeep${NC}${YLW} & ${UBLUE}EternalBlue${NC}${YLW} Vulnerability Scanner${NC}"
                                sleep 3
                                ./modules/exmods/ispy.sh
			                    ;;

                            "SMBGhost")
                                echo -e "${LP}SMBGhost scans for the CVE-2020-0796 vulnerability in Windows SMB3 protocol${NC}"
                                sleep 3
                                ./modules/exmods/smbghost.sh
                                ;;

                            "Back")
                                modules
                                ;;
                esac
        done
    echo -e "${NC}"
}
##############
# DDoS Tools #
##############
ddos(){
      cd /opt/sifter
      echo -e "${RED}"
      figlet -f mini "DDoS Tools"
      echo -e "${ORNG}"
      echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
      PS3=' =============================#?: '
        options=("Dark Star" "Impulse" "UFONet" "Back")
        select opt in "${options[@]}"
        do
            case $opt in
                "Dark Star")
                    ./modules/exmods/dark_star.sh
                    ;;

                "Impulse")
                    ./modules/exmods/impulse.sh
                    ;;

                "UFONet")
                    ./modules/exmods/ufonet.sh
                    ;;

                "Back")
                    webex
                    ;;

            esac
        done
    echo -e "${NC}"
}

################
# Router Tools #
################
routertools(){
    cd /opt/sifter
    echo -e "${RED}"
    figlet -f mini "Router Tools"
    echo -e "${ORNG}"
    echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
    PS3=' =============================#?: '
        options=("MkCheck" "RouterSploit" "Airgeddon" "Back")
        select opt in "${options[@]}"
        do
            case $opt in
                "MkCheck")
                    cd /opt/MkCheck
                    sudo ./mkcheck
                    ;;

                "RouterSploit")
                    cd /root/routersploit
                    sudo python3 rsf.py
                    ;;

                "Airgeddon")
                    sudo Airgeddon
                    ;; 

                "Back")
                    modules
                    ;;
            esac
        done
    echo -e "${NC}"
}

####################
# Web Exploitation #
####################
webex(){
  cd /opt/sifter
  echo -e "${RED}"
  figlet -f mini "Website Exploitation Tools"
  echo -e "${ORNG}"
  echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
  PS3=' =============================#?: '
        options=("DDoS" "NekoBot" "xShock" "VulnX" "Back")
        select opt in "${options[@]}"
        do
                case $opt in
                    "NekoBot")
                        echo -e "${YLW}NekoBot is a Web-Shell exploitation framework${NC}"
                        ./modules/exmods/nekobot.sh
                        ;;

                    "DDoS")
                        ddos
                        ;;

                    "xShock")
                        echo -e "${YLW}xShock is a shellshock exploitation tool${NC}"
                        sleep 3
                        ./modules/exmods/xshock.sh
                        ;;

                    "VulnX")
                        ./modules/exmods/vulnx.sh
                        ;;

		            "Back")
                        modules
                        ;;
                esac
        done
    echo -e "${NC}"
}

###################
# Web-App Modules #
###################
webapps(){
  cd /opt/sifter
  echo -e "${RED}"
  figlet -f mini "WebAppplication Scanners"
  echo -e "${ORNG}"
  echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
  PS3=' =============================#?: '
        options=("Sitadel" "BFAC" "AapFinder" "OneFind" "reNgine" "Back")
        select opt in "${options[@]}"
        do
                case $opt in
                        "Sitadel")
                            ./modules/webapps/sitadel.sh
                            ;;

                        "AapFinder")
                            ./modules/webapps/aapfinder.sh
                            ;;

                        "BFAC")
                            ./modules/webapps/bfac.sh
                            ;;

                        "OneFind")
                            ./modules/webapps/onefind.sh
                            ;;

                        "reNgine")
                            ./modules/webapps/rengine.sh
                            ;;

                        "Back")
                            modules
                            ;;
                esac
        done
    echo -e "${NC}"
}

################
# XSS Checkers #
################
xssmods(){
    cd /opt/sifter
    echo -e "${RED}"
    figlet -f mini "WebAppplication Scanners"
    echo -e "${ORNG}"
    echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
    PS3=' =============================#?: '
          options=("XSS-Strike" "XSS-Freak" "finDOM-XSS" "Back")
          select opt in "${options[@]}"
          do
            case $opt in
                "XSS-Strike")
                    ./modules/xss_sql/xsstrike.sh
                    ;;

                "XSS-Freak")
                    ./modules/xss_sql/xssfreak.sh
                    ;;

                "finDOM-XSS")
                    ./modules/xss_sql/findom.sh
                    ;;

                "Back")
                    modules
                    ;;
            esac
          done
    echo -e "${NC}"
}

################
# SQLinjection #
################
sqlmods(){
    cd /opt/sifter
    echo -e "${RED}"
    figlet -f mini "WebAppplication Scanners"
    echo -e "${ORNG}"
    echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
    PS3=' =============================#?: '
          options=("WhiteWidow" "V3n0M-Scanner" "Back")
          select opt in "${options[@]}"
          do
            case $opt in
                "WhiteWidow")
                    ./modules/xss_sql/whitewidow.sh
                    ;;

                "V3n0M-Scanner")
                    ./modules/xss_sql/v3n0m.sh
                    ;;

                "Back")
                    modules
                    ;;
            esac
          done
    echo -e "${NC}"
}

#############
# XSS & SQL #
#############
xss_sql_mods(){
    cd /opt/sifter
    echo -e "${RED}"
    figlet -f mini "Cross-Site Scripting & SQLinjection"
    echo -e "${ORNG}"
    echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
    PS3=' =============================#?: '
            options=("Cross-Site Scripting" "SQLinjection" "Back")
            select opt in "${options[@]}"
            do
                    case $opt in
                            "Cross-Site Scripting")
                                xssmods
                                ;;

                            "SQLinjection")
                                sqlmods
                                ;;

                            "Back")
                                modules
                                ;;
                    esac
            done
        echo -e "${NC}"

}
############################################
# Operational Security  & Threat Modelling #
############################################
opsec(){
    cd /opt/sifter
    echo -e "${RED}"
    figlet -f mini "Operational Security &"
    echo -e "${YLW}"
    figlet -f mini "Threat Modelling"
    echo -e "${ORNG}"
    echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
    PS3=' =============================#?: '
        options=("EventCleaner" "Threat Dragon" "Back")
        select opt in "${options[@]}"
        do
                case $opt in
                    "EventCleaner")
                        ./modules/opsec/evclean.sh
                        ;;

                    "Threat Dragon")
                        ./modules/opsec/tDragon.sh
                        ;;

                    "Back")
                        modules
                        ;;
                esac
        done
    echo -e "${NC}"
}

############################
#  Additions to Host List  #
############################
ip_Q(){
    addT=$(${_zenity} --title  "Add Target to Host.list" \
	            --entry --text "Enter the IP or URL of your target")
    echo ${Tar}
    echo ${Tar} >> /opt/sifter/files/host_list.txt
    TQ=$(zenity --question --width 300 --text "Would you like to add another?"); echo $TQ
    if [[ ${TQ} == "0" ]]; then
        addT
    fi
}

############################
#  Sorting Live from Dead  #
############################
hostcheck(){
    for name in `cat files/host_list.txt`

    	    do
    	        xterm -e ping -c 1 $name
    	            if [[ $? == 0 ]]; then
    	                echo -e "${LP}======================================================"
    	                echo -e "${LP} ${name} Alive ${NC}" && echo ${name} >> files/pingtest_raw.pass
    	                echo -e "${LP}======================================================${NC}"
    	            else
    	                echo -e "${RED}====================================================="
    	                echo -e "${RED} ${name} Dead ${NC}" && echo ${name} >> files/pingtest_raw.fail
    	                echo -e "${RED}=====================================================${NC}"
    	            fi
    	    done
}


#############################
#  Live or Dead Host Check  #	Example Data
############################# 
check_hosts(){
    TARLIST=$(cat /opt/sifter/files/host_list.txt | grep "eg. target.com")
    if [[ ${TARLIST} == "eg. target.com" ]]; then
        rm /opt/sifter/files/host_list.txt
        kdialog --textinputbox "Please add an appropriate target first!" > /opt/sifter/files/host_list.txt
    fi
    if [[ -f 'files/pingtest_raw.pass' ]]; then
    	    rm files/pingtest_raw.pass
    fi
    if [[ -f 'files/pingtest.pass' ]]; then
        rm files/pingtest.pass
    fi
    if [[ -f 'files/pingtest_pass.txt' ]]; then
        rm files/pingtest_pass.txt
    fi

    hostcheck | tee >(zenity --width=200 --height=100 \
  				    --title="whois" --progress \
			        --pulsate --text="Searching domain info..." \
                    --auto-kill --auto-close \
                    --percentage=10) >${_out}

    zenity --width=220 --height=350  \
	     --title "Live Targets" \
	     --text-info --filename="/opt/sifter/files/pingtest_raw.pass"

    zenity --width=220 --height=350  \
	     --title "Dead Targets" \
	     --text-info --filename="/opt/sifter/files/pingtest_raw.fail"

}
##############
# Host Check #
##############
#check_hosts(){
#    TARLIST=$(cat /opt/sifter/files/host_list.txt | grep "eg. target.com")
#    if [[ ${TARLIST} == "eg. target.com" ]]; then
#        rm /opt/sifter/files/host_list.txt
#        echo -e "${RED}Please add an appropriate target first${NC}"
#        nano /opt/sifter/files/host_list.txt
#    else
#        sleep 1
#    fi
#    echo -e "${ORNG}Host Check${NC}"
#    	echo -e "${ORNG}***********${NC}"
#        if [[ -f 'files/pingtest_raw.pass' ]]; then
#    	    rm files/pingtest_raw.pass
#        fi
#        if [[ -f 'files/pingtest.pass' ]]; then
#            rm files/pingtest.pass
#        fi
#        if [[ -f 'files/pingtest_pass.txt' ]]; then
#            rm files/pingtest_pass.txt
#        fi

#    	for name in `cat files/host_list.txt`
#
#    	        do
#    	            ping -c 1 $name
#    	                if [[ $? == 0 ]]; then
#    	                    echo -e "${LP}======================================================"
#    	                    echo -e "${LP} ${name} Alive ${NC}" && echo ${name} >> files/pingtest_raw.pass
#    	                    echo -e "${LP}======================================================${NC}"
#    	                else
#    	                    echo -e "${RED}====================================================="
#    	                    echo -e "${RED} ${name} Dead ${NC}" && echo ${name} >> files/pingtest_raw.fail
#    	                    echo -e "${RED}=====================================================${NC}"
#    	                fi
#    	        done

#	                sleep 5

#            echo "======================================================================================================================================================================================================================="

#        	    echo -e "${LP}Pingtest_Pass${NC}"
#            	echo -e "${LP}*************${NC}"
#		        cat files/pingtest_raw.pass | sort | uniq > files/pingtest.pass
#        	    echo -e "${YLW}"
#		        cat files/pingtest.pass
#		        echo -e "${NC}"
#		        sed -e 's/^/http:\/\//' files/pingtest.pass > files/pingtest_pass.txt

#       	    echo "======================================================================================================================================================================================================================="

#	            echo -e "${RED}Pingtest_Fail${NC}"
#	            echo -e "${RED}*************${NC}"
#	            cat files/pingtest_raw.fail | sort | uniq > files/pingtest.fail
#	            echo -e "${YLW}"
#		        cat files/pingtest.fail
#		        echo -e "${NC}"
#	            sleep 5
#        	    menu
#}

########################################
# List Argument Options Settings Below #
#         IP addition argument         #
########################################
#ip_add(){
#    echo -e "${W}Please enter your target:${NC}"
#    read IP_ANS
#    echo -e "${ORNG}Adding ${RED}${IP_ANS}${ORNG} to list${NC}"
#    sleep 1
#    echo "$IP_ANS" >> files/host_list.txt
#    ip_q
#}
#ip_q(){
#    echo -e "${W}Would you like to add another?y/n${NC}"
#    read ANS
#    sleep 1
#    if [[ $ANS == 'y' ]]; then
#        ip_add
#    else
#        menu
#    fi
#}

##################
# Result Options #
##################
#result_choices(){
#    KD=$(kdialog -h)
#    if [[ ${KD} == "" ]]; then
#        COM='cat'
#    else
#        COM='kdialog --geometry 600x800 --textbox'
#    fi
#    echo -e "${ORNG}"
#    ls
#    echo -e "${NC}"
#    echo -e " ${W}=============================================================\n ${ORNG}What would you like to do?\n ${W}=============================================================${NC}"
#    PS3=' =============================#?: '
#            options=("Check File" "Check Image" "Change Directory" "Back")
#            select opt in "${options[@]}"
#            do
#                    case $opt in
#                            "Check File")
#                                echo -e "${W}Please enter the file name${NC}"
#                                read FNAME
#                                echo -e "${W}==============================================================================================================${NC}"
#                                if [[ ${KD} == "" ]]; then
#                                    ${COM} ${FNAME} &
#                                else
#                                    ${COM} ${FNAME} &>/dev/null
#                                fi
#                            #    kdialog --geometry 600x800 --textbox ${FNAME} &
#                                echo -e "${W}==============================================================================================================${NC}"
#                                result_choices
#                                ;;

#                             "Check Image")
#                                echo -e "${W}Please enter the image name${NC}"
#                                read INAME
#                                eom ${INAME}
#                                result_choices
#                                ;;

#                            "Change Directory")
#                                echo -e "${W}Please enter the directory name${NC}"
#                                read DIR
#                                cd ${DIR}
#                                result_choices
#                                ;;

#                            "Back")
#                                cd /opt/sifter
#                                modules
#                                ;;

#                    esac
#            done
#    echo -e "${NC}"
#}

#################
#  GUI Results  #
#################
results(){
	resopt=$(zenity --title  "Choose Results to View" \
                        --height=600 --width=800 \
                        --file-selection --multiple);
    echo ${resopt} > file.tmp

    cat file.tmp | awk -F"[ | | ]" '{print $2}' >> log.tmp
    cat file.tmp | awk -F"[ | | ]" '{print $1}' >> log.tmp
    cat file.tmp | awk -F"[ | | ]" '{print $3}' >> log.tmp
    cat file.tmp | awk -F"[ | | ]" '{print $4}' >> log.tmp
    cat file.tmp | awk -F"[ | | ]" '{print $5}' >> log.tmp
    cat file.tmp | awk -F"[ | | ]" '{print $6}' >> log.tmp
    cat file.tmp | awk -F"[ | | ]" '{print $7}' >> log.tmp
    cat file.tmp | awk -F"[ | | ]" '{print $8}' >> log.tmp
    cat file.tmp | awk -F"[ | | ]" '{print $9}' >> log.tmp

    ####
    # Sort Files & Images from Selection
    ####
    for fileC in `cat log.tmp`
    do
        if file "${fileC}" | grep -qE 'image|bitmap'; then
		    ROPT="image"
            echo ${fileC} >> img.tmp
        else
            echo ${fileC} >> word.tmp
	    fi
    done
    rm log.tmp file.tmp
    sleep 3
    ####
    # Open Selected Files
    ####
    for FILE in `cat word.tmp`
    do
        zenity --notification --text="Opening Selected Files...."
        sleep 2
        zenity --title "${FILE}" \
           --height=800 --width=400 \
           --text-info --filename=${FILE}
    done
    sleep 3
    ####
    # Open Selected Images
    ####
    for IMG in `cat img.tmp`
    do
        zenity --notification --text="Opening Selected Images...."
        eom ${IMG}
    done
    rm img.tmp word.tmp
}


#############################
# Initial Proxy Check (img) #
#############################
ASTAT=$(cat $USER/.config/.anon_status)
if [[ ${ASTAT} == "NO" ]]; then
    EXC="${BIGreen}[${RED}*${BIGreen}]${NC}"
else
    EXC="${BIGreen}[${ORNG}!${BIGreen}]${NC}"
fi

################
# Proxy Options
################
proxysystem(){
    ASTAT=$(cat $USER/.config/.anon_status)
    if [[ ${ASTAT} == "YES" ]]; then
        ENA="Anonsurf is currently: On"
        STOP="TRUE \"Stop\""
        START="FALSE \"Start\""
    else
        ENA="Anonsurf is currently: Off"
        STOP="FALSE \"Stop\""
        START="TRUE \"Start\""
    fi
    proxyO=$(zenity --list --title  "${ENA}" \
		--text "What would you like to do?" --radiolist  \
		--height=350 --width=500 \
		--column "Pick" --column "Catagory" ${START} ${STOP} FALSE "Back"); 
    echo ${proxyO}
    if [[ ${proxyO} == "Start" ]]; then
        sudo anonsurf start | tee >(${_zenity} --width=350 --height=500 \
  			--title="Starting AnonSurf" --progress \
			--pulsate --text="AnonSurf is starting to tunnel traffic through tor..." \
                        --auto-kill --auto-close \
                        --percentage=10) >${_out}

    	${_zenity} --width=350 --height=500  \
	           --title "AnonSurf StartUp Log" \
	           --text-info --filename="${_out}"
         echo "YES" > $USER/.config/.anon_status


    elif [[ ${proxyO} == "Stop" ]]; then
        sudo anonsurf stop | tee >(${_zenity} --width=350 --height=500 \
  		   --title="Stopping AnonSurf" --progress \
		   --pulsate --text="AnonSurf is sending traffic through the ClearWeb..." \
                   --auto-kill --auto-close \
                   --percentage=10) >${_out}
 
        ${_zenity} --width=350 --height=500  \
	         --title "AnonSurf ShutDown Log" \
	         --text-info --filename="${_out}"
          echo "NO" > $USER/.config/.anon_status
    else
        menu
    fi
}

###############
# Module Menu #
###############
modules(){
    echo -e "${URED}"
    figlet -f mini "Modules"
    echo -e "${NC}"
    ASTAT=$(cat $USER/.config/.anon_status)
    echo -e " ${W}=============================================================${NC}"
    echo -e "${EXC} ${BIGreen}Anonymous: ${BIYellow}${ASTAT}${NC}"
    echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
    PS3=' =============================#?: '
            options=("Information Gatherers" "Domain Recon Gathering" "Network Scanners" "Website Scanners & Enumerators" "Vulnerability Scanners" "HoneyPot Detection Systems" "Router Tools" "Exploitation Tools" "Operational Security & Threat Analysis" "Cross-Site Scripting & SQLinjection" "WebAppplication Scanners" "Password Tools" "View Results" "Module Information" "Anonymization" "Pass Time" "Check Tool Installs" "Main Menu" "Quit")
            select opt in "${options[@]}"
            do
                    case $opt in
                            "Information Gatherers")
                                info_mods
                                ;;

                            "Domain Recon Gathering")
                                dom_mods
                                ;;

                            "Network Scanners")
                                net_mods
                                ;;

                            "Website Scanners & Enumerators")
                                web_mods
                                ;;

                            "Vulnerability Scanners")
                                vuln_mods
                                ;;

                            "HoneyPot Detection Systems")
                                honey_mods
                                ;;

                            "Router Tools")
                                routertools
                                ;;

                            "Exploitation Tools")
                                ex_mods
                                ;;

                            "Operational Security & Threat Analysis")
                                opsec
                                ;;

                            "Cross-Site Scripting & SQLinjection")
                                xss_sql_mods
                                ;;

			                "WebAppplication Scanners")
			                    webapps
			                    ;;

                            "Password Tools")
                                passtools
                                ;;

                            "View Results")
                                results
                                ;;

                            "Module Information")
                                bash /opt/sifter/info/info.sh                                
                                ;;

                            "Anonymization")
                                proxysystem
                                ;;

                            "Pass Time")
                                echo -e "${RED}This module is to pass some time during long scans \nsuch as nMap (Full Port Scan) or RapidScan${NC}"
                                echo -e "${W}Would you like to continue? (${YLW}y${W}/${YLW}n${W})"
                                read PTOPT
                                if [[ ${PTOPT} == 'y' ]]; then
                                    firefox https://github.blog/2020-08-06-gmtk-game-jam-2020-staff-picks-open-source-games/ &
                                else
                                    modules
                                fi
                                ;;

                            "Check Tool Installs")
                                info/tool_check.sh
                                ;;

                            "Main Menu")
                                menu
                                ;;

                            "Quit")
                                ASTAT=$(cat $USER/.config/.anon_status)
                                if [[ ${ASTAT} == "YES" ]]; then
                                    echo -e "\n    ================================================" 
                                    echo -e "${ORNG}[${RED}!${ORNG}] ${LGRY}System Proxy is still active..."
                                    echo -e "${LP}Attempting to stop it now..."
                                    sudo anonsurf stop
                                    echo -e "${LP}Proxy Stopped${RED}!${NC}"
                                    echo "NO" > $USER/.config/.anon_status
                                    echo -e "\n    ================================================"
                                fi
                                RENCHK=$(sudo docker container ls | grep rengine)
                                if [[ ${RENCHK} == "rengine_web_1" ]]; then
                                    sudo docker stop rengine_proxy_1 rengine_web_1 rengine_db_1
                                fi
                                exit 0
                                ;;

                            "*")
                                if [[ -d ${opt} ]]; then
                                    cd ${opt}
                                fi
                                ;;

                    esac
            done
    echo -e "${NC}"
}

############
#   Menu   #
############
menu(){
    echo -e "${INV}${LGRY}"
    python3 extras/ban.py
    python3 extras/ban2.py
    arg=$1
    ASTAT=$(cat $USER/.config/.anon_status)   
    echo -e " ${EXC} ${BIGreen}Anonymous: ${BIYellow}${ASTAT}${NC}"
    echo -e " ${W}==================================================\n ${ORNG}What would you like to do?\n ${W}==================================================${NC}"
    echo -e "\n ${ORNG}1.${W} Check Hosts               ${ORNG}5.${W} View Results${NC}"
    echo -e " ${ORNG}2.${W} Edit Host List            ${ORNG}6.${W} Update${NC}"
    echo -e " ${ORNG}3.${W} Module Menu               ${ORNG}7.${W} Quit${NC}"
    echo -e " ${ORNG}4.${W} Anonymization${NC}"
    echo -e " ${W}"
    echo -n " =============================#?: "
    read MNOP
    if [[ ${MNOP} == "1" ]]; then                   # Check Hosts
	    TARLIST=$(cat files/host_list.txt | grep "eg. target.com")
        if [[ ${TARLIST} == "eg. target.com" ]]; then
            rm /opt/sifter/files/host_list.txt
            touch /opt/sifter/files/host_list.txt
            echo -e "${W}Please add targets to the list${NC}"
            sleep 2
            nano /opt/sifter/files/host_list.txt
        else
            sleep 1
        fi
        check_hosts
    elif [[ ${MNOP} == "2" ]]; then                 # Edit Host List
        nano /opt/sifter/files/host_list.txt
    elif [[ ${MNOP} == "3" ]]; then                 # Module Menu
        modules
    elif [[ ${MNOP} == "4" ]]; then                 # Anonymization
        proxysystem
    elif [[ ${MNOP} == "5" ]]; then                 # View Results
        results
    elif [[ ${MNOP} == "6" ]]; then                 # Update
        update
    elif [[ ${MNOP} == "7" ]]; then                 # Quit
        ASTAT=$(cat $USER/.config/.anon_status)
        if [[ ${ASTAT} == "YES" ]]; then
            echo -e "\n    ================================================" 
            echo -e "${ORNG}[${RED}!${ORNG}] ${LGRY}System Proxy is still active..."
            echo -e "${LP}Attempting to stop it now..."
            sudo anonsurf stop
            echo -e "${LP}Proxy Stopped${RED}!${NC}"
            echo "NO" > $USER/.config/.anon_status
            echo -e "\n    ================================================"
        fi
        RENCHK=$(sudo docker container ls | grep rengine)
        if [[ ${RENCHK} == "rengine_web_1" ]]; then
            sudo docker stop rengine_proxy_1 rengine_web_1 rengine_db_1
        fi
        exit 0
    elif [[ -d ${MNOP} ]]; then
        cd ${MNOP}
    else
        echo -e "${ORNG}[${RED}!${ORNG}] ${YLW}Invalid option selected.\nPlease enter the corresponding number${NC}"
    fi
    echo -e "${NC}"
    menu
}

##############
# Update Arg #
##############
up_arg(){
    echo $1 >> temp.log
    echo $2 >> temp.log
    echo $3 >> temp.log
    echo $4 >> temp.log
    echo $5 >> temp.log
    echo $6 >> temp.log
    echo $7 >> temp.log
    echo $8 >> temp.log
    echo $9 >> temp.log

    for UFILES in `cat temp.log`
       	        do
    	            rm ${LPATH}${UFILES}
                done
    rm /opt/sifter/temp.log
}
update(){
    sudo chown $USER:$USER -R /opt/sifter
    cd /opt/sifter
    mv sifter sifter_g
    echo -e "${YLW}"
    figlet -f mini "Checking for updates"
    echo -e "${NC}"
   
    echo -e "${YLW}##########################"                                                    	########################
    echo -e "${YLW}# ${ORNG}Installed Version :${LP} 10 ${YLW}#${NC}"                                   ##    VERSION INFO    ##
    echo -e "${YLW}# ${ORNG} Incoming Revision: ${LP}2  ${YLW}#"                                        ##    UPDATE CHECK    ##
    echo -e "${YLW}##########################${NC}"                                               	########################

    if [[ -f '/opt/sifter/modules/exmods/fuzzydander.sh' ]]; then
    	sudo mv modules/exmods/fuzzydander.sh modules/exmods/fuzzyd.sh
    fi
    git fetch
    VER=$(git pull)
    if [[ ${VER} == "Already up to date." ]]; then
        echo -e "${ORNG}"
        figlet -f mini "Up to date."
        echo -e "${NC}"
	if [[ -f "sifter_g" ]]; then
		mv sifter_g sifter
	fi
    else
        sleep 5
	    echo -e "${W}Are there pull conflicts with files?(${YLW}y/n${W})${NC}"
      	    sleep 3
	    read UANS
	    if [[ ${UANS} == "y" ]]; then
            	export LPATH
            	echo -e "${W}Please enter the conflicting files (seperated by a space)${NC}"
		read FILES
                sleep 2
		up_arg ${FILES}
		git pull
	    fi
	            
        ##########################
        # Check For Full Upgrade #
        ##########################
        echo -e "${URED}Would you like to check for new tools or tool updates?(y/n)${NC}"
        read -r FUP
	if [[ -f "sifter_g" ]]; then
		mv sifter_g sifter
	fi
        if [[ ${FUP} == "y" ]]; then
            sudo chmod +x install.sh
            bash install.sh
        fi
        sudo cp /opt/sifter/sifter -t /usr/sbin
        sudo chown $USER:$USER /opt/sifter --recursive
        sudo chown $USER:$USER /usr/sbin/sifter
        chmod +x /opt/sifter --recursive
        chmod +x /usr/sbin/sifter
    fi
}

cd /opt/sifter
if [[ ${STLTH} == "--stealth" ]]; then
    echo -e " ${W}===========================================${NC}"
    echo -e "${LP}Starting Sifter in ${URED}Anonymous${NC} ${LP}mode${NC}"
    sudo anonsurf start
    echo "YES" > $USER/.config/.anon_status      
    echo -e " ${W}===========================================${NC}"
    menu
fi

while getopts "a:WndwirmeopcvRuhI" options
    do            	                                        # Loop: Get the next option;
    case "${options}" in                                	# use silent error checking;
                                                            # option a takes 1 arguments.
        c)
            echo -e "${YLW}"
            figlet -f mini "Checking for live targets..."
            echo -e "${NC}"
            check_hosts
            menu
            ;;

        a)
            echo -e "${ORNG}Adding ${RED}${ARG} ${ORNG}to host_list.txt${NC}"
                TARLIST=$(cat /opt/sifter/files/host_list.txt)
                if [[ ${TARLIST} == "eg. target.com" ]]; then
                    rm /opt/sifter/files/host_list.txt
                    touch /opt/sifter/files/host_list.txt
                fi
            echo "$ARG" >> files/host_list.txt
            sleep 2
            menu
            ;;

        i)
            echo -e "${LP}"
            figlet -f mini "Info Gatherers"
            echo -e "${NC}"
            cred_mods
            ;;

        d)
            echo -e "${LP}"
            figlet -f mini "Domain-Fuzzers"
            echo -e "${NC}"
            dom_mods
            ;;

        e)
            echo -e "${LP}"
            figlet -f mini "Exploitative Modules"
            echo -e "${NC}"
            ex_mods
            ;;

        n)
            echo -e "${LP}"
            figlet -f mini "Network Mappers"
            echo -e "${NC}"
            net_mods
            ;;

        v)
            echo -e "${LP}"
            figlet -f mini "Vulnerability Scanners"
            echo -e "${NC}"
            vuln_mods
            ;;

        W)
            echo -e "${LP}"
            figlet -f mini "Web-Application Testers"
            echo -e "${NC}"
            webapps
            ;;

        p)
            echo -e "${LP}"
            figlet -f mini "Password Tools"
            echo -e "${NC}"
            passtools
            ;;

        r)
            echo -e "${LP}"
            figlet -f mini "Router Tools"
            echo -e "${NC}"
            routertools
            ;;
	    
	o)
	    echo -e "${LP}"
	    figlet -f mini "OpSec & Threat Analysis"
	    echo -e "${NC}"
	    opsec
	    ;;

        w)
            echo -e "${LP}"
            figlet -f mini "Web Recon"
            echo -e "${NC}"
            web_mods
            ;;

        R)
            echo -e "${LP}"
            figlet -f mini "Sifter Results"
            echo -e "${NC}"
            results
            ;;

        u)
            update
            ;;

        h)
            echo -e "${RED}"
            python3 extras/ban.py
            echo -e "${NC}"
            usage
            ;;

        I)
            echo -e "${RED}"
            figlet -f mini "Module Info"
            echo -e "${NC}"
            bash /opt/sifter/info/info.sh 
            ;;

        m)
            echo -e "${INV}${LGRY}"
            python3 extras/ban.py
            echo -e "${RED}"
            figlet -f mini "Modules"
            echo -e "${NC}"
            modules
            ;;

        *)
            echo -e "${RED}No Valid Option Parsed\nRedirecting to Main Menu${NC}"
            menu
            ;;
    esac
done
if [[ ${OPTIND} == 1 ]]; then				# if no option is passed
	menu		  	                        # default command is run
fi
exit

##########################______________ VGhlIERlYWQgQnVubnkgQ2x1Yg== ______________##########################
